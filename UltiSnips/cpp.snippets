#-- a comment line
snippet --
//--------------------------------------------------------------------------
endsnippet

#class 
snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	private:
		${4:// Add some fields}
	public:
		${1/(\w+).*/$1/} (${2:arguments});
		virtual ~${1/(\w+).*/$1/} ();

		${3:// Add a method}
};${0}
endsnippet

snippet ns "namespace .. (namespace)"
//--------------------------------------------------------------------------
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
//--------------------------------------------------------------------------
${VISUAL}${0}
//--------------------------------------------------------------------------
}//namepsace $1
//--------------------------------------------------------------------------
endsnippet

#include guards
snippet once
//--------------------------------------------------------------------------
#ifndef ${1}_H
#define $1_H
${VISUAL}${0}
#endif
//--------------------------------------------------------------------------
//EOF
endsnippet

#if block
snippet if 
if(${1})
{
	${VISUAL}${0}
}
endsnippet

#else if block
snippet elseif
else if(${1})
{
	${VISUAL}${0}
}
endsnippet

#else block
snippet else 
else
{
	${VISUAL}${0}
}
endsnippet

#for
snippet for
for(int i=0;i<${1};i++)
{
	${VISUAL}${0}
}
endsnippet

#cout 
snippet cout 
std::cout << ${1} << std::endl;
endsnippet

#include snippets
snippet Inc
#include <${1}>
endsnippet

snippet inc
#include "${1}.h"
endsnippet

#a main function
snippet main
int main(int argc, char** argv)
{
	${1}
	return 0;
}
endsnippet

snippet while "while loop"
while(${1}) 
{
${VISUAL}${0}
}
endsnippet

snippet funcd "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet func "function" b
${1:void} ${2:function_name}(${3})
{
${VISUAL}${0}
}
endsnippet

snippet usingns
using namespace ${1:namespace};
endsnippet

snippet eof
//EOF${NORMAL}
endsnippet
